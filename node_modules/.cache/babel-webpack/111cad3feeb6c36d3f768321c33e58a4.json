{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RestService = /*#__PURE__*/(() => {\n  class RestService {\n    constructor(httpClient) {\n      this.httpClient = httpClient; // Http Header\n\n      this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    }\n\n    extractData(res) {\n      const body = res;\n      return body || {};\n    } // Add\n\n\n    addTodo(data) {\n      let API_URL = `/Todo`;\n      return this.httpClient.post(API_URL, data).pipe(catchError(this.handleError));\n    } // Get all tasks\n\n\n    getTodos() {\n      return this.httpClient.get(`/Todo`);\n    } // Get task by id\n\n\n    getTodoById(id) {\n      let API_URL = `/Todo/${id}`;\n      return this.httpClient.get(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    } // Update\n\n\n    updateTodo(id, data) {\n      let API_URL = `/Todo/${id}`;\n      return this.httpClient.patch(API_URL, data, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } // Delete\n\n\n    deleteTodo(id) {\n      let API_URL = `/Todo/${id}`;\n      return this.httpClient.delete(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } // Error \n\n\n    handleError(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // Handle client error\n        errorMessage = error.error.message;\n      } else {\n        // Handle server error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  RestService.ɵfac = function RestService_Factory(t) {\n    return new (t || RestService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestService,\n    factory: RestService.ɵfac,\n    providedIn: 'root'\n  });\n  return RestService;\n})();","map":null,"metadata":{},"sourceType":"module"}